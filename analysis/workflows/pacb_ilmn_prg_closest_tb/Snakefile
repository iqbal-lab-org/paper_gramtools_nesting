from pathlib import Path

WORKFLOW = "pacb_ilmn_prg_closest_tb"


configfile: "analysis/configs/common.yaml"
configfile: "analysis/configs/tb_bigdel.yaml"


container: config["container"]


# Get assemblies to process
include: "../pacb_ilmn_validation/utils.py"


ASSEMBLIES = get_samples(config["sample_tsv"])

# Get regions to process. They are not genes, named so for convenience
GENES = []
regions = dict()
with open(config["beds"]["with_flank"]) as fin:
    for line in fin:
        GENES.append(line.strip().split("\t")[3])
        elems = line.strip().split("\t") 
        regions[elems[3]] = f'{elems[0]}:{int(elems[1])+1}-{elems[2]}'



# regions have '_' in their name, make sure that doesnt get used by assembly wildcard
wildcard_constraints:
    assembly="[^/_]+",
    mapper="[^/]+",


# ____Output paths___#
include: "../common_utils.py"

GMTOOLS_COMMIT = get_gmtools_commit()

output_base = Path(f'{config["output_dir"]}/{WORKFLOW}/')
output_alignments = output_base / "alignments"
output_closest = output_base / "prg_closest"
output_prelim_stats = output_closest / "prelim_stats"
output_indexes = output_base / "indexes"
output_fastas = output_indexes / "fasta"
output_prgs = output_indexes / "prgs"
output_induced = output_base / "induced"
output_eval = output_base / "eval_jvcf" / f"gramtools_{GMTOOLS_COMMIT}"
output_plots = output_base / "plots" / GMTOOLS_COMMIT
mk_output_dirs(dir())

# __Input paths__#
output_bowtie_indexes = Path(f'{config["output_dir"]}/tb_bigdel/bowtie_indexes')
input_sequences_dir = Path(f'{config["output_dir"]}/make_prgs/tb_bigdel/msas')
input_prgs_dir = Path(f'{config["output_dir"]}/make_prgs/tb_bigdel/prgs/mn5_mml7')
validation_stats = Path(
    f'{config["output_dir"]}/tb_bigdel/plots/callsunfiltered_stats.tsv'
)
gramtools_genotyped = Path(f'{config["output_dir"]}/tb_bigdel/genotyped/gramtools_{GMTOOLS_COMMIT}')


rule all:
    input:
        expand(f'{output_eval}/eval_stats_{{mapper}}.tsv', mapper=["bowtie2", "minimap2"]),
        expand(f'{output_base}/closest_stats_{{mapper}}.tsv"', mapper=["bowtie2", "minimap2"]),


rule index_input_seqs:
    input:
        gene_portions=f"{input_sequences_dir}/{{gene}}.fa",
    output:
        fa=f"{output_fastas}/{{gene}}.fa",
        fai=f"{output_fastas}/{{gene}}.fa.fai",
    shell:
        """
        cp {input} {output.fa}
        samtools faidx {output.fa}
        """


rule index_input_prg:
    input:
        prg=f"{input_prgs_dir}/{{gene}}.bin",
    output:
        prg=f"{output_prgs}/{{gene}}",
    params:
        concat_prg_script=f'{config["scripts"]}/make_prgs/concat_prgs.py',
    shadow:
        "shallow"
    shell:
        f"""
        echo -e "\t\t\t{{wildcards.gene}}" > to_concat.txt
        python3 {{params.concat_prg_script}} {input_prgs_dir} to_concat.txt {{output.prg}}
        """

rule tb_bowtie2_align_to_assemblies:
    input:
        gene_portions=f"{input_sequences_dir}/{{gene}}.fa",
        index=expand(
            f"{output_bowtie_indexes}/{{assembly}}.{{ext}}",
            ext=bowtie2_idx_extensions,
            allow_missing=True,
        ),
    output:
        alignment_file=f"{output_alignments}/bowtie2/{{assembly}}_{{gene}}.sam",
    resources:
        mem_mb=5000,
    params:
        index_prefix=f"{output_bowtie_indexes}/{{assembly}}",
    shell:
        """
        bowtie2 -x {params.index_prefix} -U {input.gene_portions} -f > {output.alignment_file}
        """

rule tb_align_gene_portions_minimap2:
    input:
        gene_portions=f"{input_sequences_dir}/{{gene}}.fa",
        assembly=f'{config["assemblies_dir"]}/{{assembly}}.fasta.gz',
    output:
        ori_alignment_file=f"{output_alignments}/minimap2/original/{{assembly}}_{{gene}}.sam",
        alignment_file=f"{output_alignments}/minimap2/{{assembly}}_{{gene}}.sam",
    resources:
        mem_mb=5000,
    shell:
        """
        mkdir -p $(dirname {output.ori_alignment_file})
        minimap2 -a {input.assembly} {input.gene_portions} > {output.ori_alignment_file}
        """
        f"""
        python3 {config["scripts"]}/tb_bigdel/add_NW_eddist.py {{output.ori_alignment_file}} {{input.assembly}} {{output.alignment_file}} #--num_seqs {len(regions)}
        """


rule get_stats:
    input:
        alignment_file=f"{output_alignments}/{{mapper}}/{{assembly}}_{{gene}}.sam",
        var_bed=config["beds"]["with_flank"],
    output:
        stats_file=temp(f"{output_prelim_stats}/{{mapper}}/{{assembly}}_{{gene}}.tsv"),
    params:
        script=f'{config["scripts"]}/pacb_ilmn_prg_closest/process_alignments.py',
    shell:
        """
        mkdir -p $(dirname {output.stats_file})
        python3 {params.script} --min_qlen 500 {input.alignment_file} {input.var_bed} {output}
        """

rule tb_gramtools_induce_in_prg:
    input:
        stats_file=f"{output_prelim_stats}/{{mapper}}/{{assembly}}_{{gene}}.tsv",
        fa=f"{output_fastas}/{{gene}}.fa",
        prg=f"{output_prgs}/{{gene}}",
    output:
        stats_file=f"{output_closest}/{{mapper}}/{{assembly}}_{{gene}}.tsv",
        json_file=f"{output_induced}/{{mapper}}/{{assembly}}_{{gene}}_closest_in_prg_mapq_40.json",
    params:
        odir=f"{output_induced}/{{mapper}}",
    shadow:
        "shallow"
    shell:
        """
        mkdir -p $(dirname {output.stats_file}) $(dirname {output.json_file})
        IFS="\n"; for line in $(cat {input.stats_file})
        do
            IFS="\t"; elems=($line); seq_name=${{elems[4]}}; condition=${{elems[3]}}
            newline=$(echo ${{elems[@]}} | tr ' ' '\t' | tr -d '\n')
            if [[ $seq_name == "NA" ]]; then
                echo -e "${{newline}}\t0" > {output.stats_file}
                touch {output.json_file}
            else
                samtools faidx {input.fa} ${{seq_name}} > best.fa
                gramtools simulate --prg {input.prg} -i best.fa --sample_id {wildcards.assembly}_{wildcards.gene}_${{condition}} -o {params.odir} --force
                echo -e "${{newline}}\t1" > {output.stats_file}
            fi
        done
        """


rule concat_stats:
    input:
        expand(
            f"{output_closest}/{{mapper}}/{{assembly}}_{{gene}}.tsv",
            assembly=ASSEMBLIES,
            gene=GENES,
            allow_missing=True,
        ),
    output:
        f'{output_base}/closest_stats_{{mapper}}.tsv"',
    shell:
        """
        echo "gene\tsample\tNM\tcondition\tquery\tfound_in_prg" > {output}
        cat {input} >> {output}
        """

rule tb_evaluate_jvcf:
    input:
        json_truth=rules.tb_gramtools_induce_in_prg.output.json_file,
        json_gtyped=f'{gramtools_genotyped}/{{assembly}}/genotype/genotyped.json',
    output:
        f'{output_eval}/{{mapper}}/{{assembly}}_{{gene}}.tsv',
    params:
        eval_script=f'{config["scripts"]}/pacb_ilmn_prg_closest/evaluate_jvcf.py',
        region=lambda wildcards: regions[wildcards.gene],
    shell:
        """
        if [[ ! -s {input.json_truth} ]]; then touch {output}
        else
            python3 {params.eval_script} --region {params.region} {input.json_gtyped} {input.json_truth} {output}
        fi
        """

rule concat_evals:
    input:
        expand(
            f"{output_eval}/{{mapper}}/{{assembly}}_{{gene}}.tsv",
            assembly=ASSEMBLIES,
            gene=GENES,
            allow_missing=True,
        ),
    output:
        f'{output_eval}/eval_stats_{{mapper}}.tsv',
    params:
        eval_script=f'{config["scripts"]}/pacb_ilmn_prg_closest/evaluate_jvcf.py',
    shell:
        """
        python3 {params.eval_script} -p > {output}
        cat {input} >> {output}
        """

rule plot_delta_NM:
    input:
        closest_prg_stats=rules.concat_stats.output,
        validation_stats=validation_stats,
    output:
        expand(f"{output_plots}/{{gene}}_gmtools_delta.pdf", gene=GENES),
    params:
        script=f'{config["scripts"]}/pacb_ilmn_prg_closest/process_stats.py',
    shell:
        f"python3 {{params.script}} {{input.validation_stats}} {{input.closest_prg_stats}} {output_plots}"
